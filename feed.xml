<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://nmashalov.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://nmashalov.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-14T22:52:44+00:00</updated><id>https://nmashalov.github.io/feed.xml</id><title type="html">Nikita Mashalov</title><subtitle>The personal site of Nikita Mashalov. </subtitle><entry><title type="html">Airflow automatization</title><link href="https://nmashalov.github.io/blog/2024/airflow_automation/" rel="alternate" type="text/html" title="Airflow automatization"/><published>2024-01-10T00:00:00+00:00</published><updated>2024-01-10T00:00:00+00:00</updated><id>https://nmashalov.github.io/blog/2024/airflow_automation</id><content type="html" xml:base="https://nmashalov.github.io/blog/2024/airflow_automation/"><![CDATA[<p>Through my previous year I had intensive work as MLOps specialist. One of my task was to facilitate in-house Airflow provision. I’ll share some techniques, that I developed during my work.</p> <p>Provider haven’t brought any practices of Airflow, so</p> <h2 id="setup">Setup</h2> <p>Result was delivered by cli command to provider server. Serious</p> <p>Simple mistakes could ruin whole production process, so it was nessary to bring several environments.</p> <h2 id="one-operator---many-models">One operator - many models</h2> <p>Provisioner his own operator which was similar to Kubernetes.</p> <h2 id="ci-delivery">CI delivery</h2> <h2 id="environments">Environments</h2> <p>Through my journey I made serious mistake of confusing environments and Git branches.</p> <h2 id="templating-helps">Templating helps</h2> <p>Dag were created</p> <p>Through use of Jinja</p> <p>I provide you with my template to start</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


</code></pre></div></div> <h2 id="node-based-programming">Node-based programming</h2> <p>Finally</p> <p>I share my</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Through my previous year I had intensive work as MLOps specialist. One of my task was to facilitate in-house Airflow provision. I’ll share some techniques, that I developed during my work.]]></summary></entry><entry><title type="html">Airflow automatization</title><link href="https://nmashalov.github.io/blog/2024/flink-SQL/" rel="alternate" type="text/html" title="Airflow automatization"/><published>2024-01-10T00:00:00+00:00</published><updated>2024-01-10T00:00:00+00:00</updated><id>https://nmashalov.github.io/blog/2024/flink-SQL</id><content type="html" xml:base="https://nmashalov.github.io/blog/2024/flink-SQL/"><![CDATA[<p>Apache Flink is powerful streaming</p> <p>They have awesome documentation</p> <p>Yet some reasonable features requires ad-hoc. I’ll share you with some of my favorite.</p> <h2 id="understanding-time-in-flink">Understanding time in Flink</h2> <ul> <li>processed time</li> <li>event time</li> </ul> <h3 id="processed-time">Processed time</h3> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="n">proc_time</span> <span class="k">AS</span> <span class="n">PROCTIME</span><span class="p">()</span>
</code></pre></div></div> <h3 id="event-time">Event time</h3> <p>As kafka is queue events are read sequentially. If we use event time we require</p> <p>When events doesn’t follow shedule they are called</p> <p>For mitigating late events you can use watermark</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">event_ts</span> <span class="nb">timestamp</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span>
<span class="n">WATERMARK</span> <span class="k">FOR</span> <span class="n">events_ts</span> <span class="k">AS</span> <span class="n">event_ts</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'1'</span> <span class="k">MINUTE</span>
</code></pre></div></div> <p>With such definition we’ll wait for late events for one minute.</p> <p>In brief watermark say operators that events before mark were already processed.</p> <h3 id="example">Example</h3> <p>Suppose we send our dataset of three events happend every minute</p> <table> <thead> <tr> <th>id</th> <th>ts</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>2023-01-12 10:30:00.000</td> </tr> <tr> <td>1</td> <td>2023-01-12 10:31:00.000</td> </tr> <tr> <td>1</td> <td>2023-01-12 10:32:00.000</td> </tr> </tbody> </table> <p>Using proctime</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="k">source</span><span class="p">(</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">ts</span><span class="p">,</span>
    <span class="n">proc_time</span> <span class="k">AS</span> <span class="n">PROCTIME</span><span class="p">()</span>
<span class="p">)</span>
<span class="k">FROM</span> <span class="n">source_table</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="n">id</span> 
<span class="k">FROM</span> <span class="k">TABLE</span><span class="p">(</span><span class="n">TUMBLE</span><span class="p">(</span><span class="k">TABLE</span> <span class="k">source</span><span class="p">,</span> <span class="k">DESCRIPTOR</span><span class="p">(</span><span class="n">pc</span><span class="p">),</span> <span class="n">interval</span> <span class="s1">'1'</span> <span class="k">minute</span><span class="p">));</span>
</code></pre></div></div> <p>If we’ll process it through using <code class="language-plaintext highlighter-rouge">processed_time</code> we’ll get 3. Yet with use of</p> <h2 id="field-unpacking">Field unpacking</h2> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div> <h2 id="work-with-array">Work with array</h2> <h2 id="difficult-calculations">Difficult calculations.</h2> <p>Calculations are better perfomed sequentialy</p> <p>Haversine formula is used for calculating distance between two points defined by latitude and longitude.</p> <p>This formula is especially in geo-streaming applications.</p> <p>Exact formula is given by:</p> \[2 r \arcsin\left(\sqrt{\sin^2(\frac{\phi_1-\phi_2}{2}) + \cos \phi_1 \cos \phi_2 \sin^2 (\frac{\lambda_2-\lambda_1}{2})}\right)\] <p>It’s really difficult to</p> <p>I advise you to use chaining for facilitation of your work.</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">power</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">locationLng1</span><span class="o">-</span><span class="n">locationLng2</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span><span class="p">.</span><span class="mi">14</span><span class="o">/</span><span class="mi">360</span><span class="p">.,</span><span class="mi">2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dlng</span><span class="p">,</span>
<span class="n">power</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">locationLat1</span><span class="o">-</span><span class="n">locationLat2</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span><span class="p">.</span><span class="mi">14</span><span class="o">/</span><span class="mi">360</span><span class="p">.,</span><span class="mi">2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dlat</span><span class="p">,</span>
<span class="n">cos</span><span class="p">(</span><span class="n">locationLat1</span> <span class="o">*</span> <span class="mi">3</span><span class="p">.</span><span class="mi">14</span><span class="o">/</span> <span class="mi">180</span><span class="p">.)</span> <span class="k">AS</span> <span class="n">cos_loc1</span><span class="p">,</span>
<span class="n">cos</span><span class="p">(</span><span class="n">locationLat2</span> <span class="o">*</span> <span class="mi">3</span><span class="p">.</span><span class="mi">14</span><span class="o">/</span> <span class="mi">180</span><span class="p">.)</span> <span class="k">AS</span> <span class="n">cos_loc2</span><span class="p">,</span>
</code></pre></div></div> <p>I multiply by <code class="language-plaintext highlighter-rouge">3.14/180.</code> to convert gradus for radians. Earth radius 🌎 is approximately 6371 km. So final distance will be</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">2</span><span class="o">*</span><span class="mi">6371</span><span class="o">*</span><span class="n">asin</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">dlat</span><span class="o">+</span><span class="n">cos_loc1</span><span class="o">*</span><span class="n">cos_loc2</span><span class="o">*</span><span class="n">dlng</span><span class="p">))</span>
</code></pre></div></div> <h2 id="use-of-cassandra">Use of Cassandra</h2> <p>Flink provides</p> <p>Not all tables can b</p> <p><a href="https://cassandra.apache.org/_/index.html"></a></p> <h2 id="deduplication">Deduplication</h2> <p>Deduplication is essential in cases when you have a lot of events but you don’t want to overload.</p> <p>First I’ll provide my approach and</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span>
    <span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">os</span><span class="p">)</span> <span class="k">AS</span> <span class="n">os</span>  
<span class="k">FROM</span> <span class="k">TABLE</span><span class="p">(</span>
    <span class="n">TUBMLE</span><span class="p">(</span>
        <span class="k">TABLE</span> <span class="n">mob_events</span><span class="p">,</span>
        <span class="k">DESCRIPTOR</span><span class="p">(</span><span class="n">proc_time</span><span class="p">),</span>
        <span class="n">INTERVAL</span> <span class="s1">'20'</span> <span class="k">SECOND</span>
    <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
</code></pre></div></div> <p>Alternative</p> <p>SELECT id, FIRST_VALUE(os) AS os<br/> FROM TABLE( TUBMLE( TABLE mob_events, DESCRIPTOR(proc_time), INTERVAL ‘20’ SECOND ) ) ) GROUP BY 1</p> <p>This script</p> <p>First of all you need to know about time in Flink There are three types:</p> <ul> <li><strong>Processing time</strong>:</li> <li><strong>Event time</strong>”:</li> <li><strong>Ingestion time</strong>: time when event was <em>ingested</em> to operator</li> </ul> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">(</span>
    <span class="p">...</span>
    <span class="n">proc_time</span> <span class="k">AS</span> <span class="n">PROCTIME</span><span class="p">(),</span> 
    <span class="n">row_time</span> <span class="k">AS</span> <span class="k">LOCALTIMESTAMP</span> <span class="c1">-- normal timestamp(3)</span>
<span class="p">)</span> 
</code></pre></div></div> <p>That</p> <p>Also you need to know more about time windows in <a href="https://nightlies.apache.org/flink/flink-docs-release-1.14/docs/dev/datastream/operators/windows/">Flink</a></p> <h2 id="time-transformation">Time transformation</h2> <p>There a lot of formats of representing of time</p> <ul> <li>UNIX: in milliseconds or seconds from</li> <li>TIMESTAMP:</li> </ul> <p>Flink also specefies difference between timestamp.</p> <ul> <li>TIMESTAMP</li> <li>TIMESTAMP(3) - seconds</li> <li>TIMESTAMP(6) - miliseconds Probable cavets also can be timezones.</li> </ul> <p>For some cases it’s beneficial to convert them to each other</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">kafka_source</span><span class="p">(</span>
    <span class="c1">-- first you declare field</span>
    <span class="n">eventUnixTime</span> <span class="nb">BIGINT</span><span class="p">,</span>
    <span class="c1">-- then you transform it</span>
    <span class="c1">-- UNIXTIME work with seconds not ms</span>
    <span class="n">eventTimeStamp</span> <span class="k">AS</span> <span class="n">TO_TIMESTAMP</span><span class="p">(</span><span class="n">FROM_UNIXTIME</span><span class="p">(</span><span class="n">eventTimestamp</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">))</span>
<span class="p">)</span>
</code></pre></div></div> <p>You can cast time like <code class="language-plaintext highlighter-rouge">03-00-00</code> to <code class="language-plaintext highlighter-rouge">TIME</code> via simple:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- now it's TIME format</span>
<span class="k">CAST</span><span class="p">(</span><span class="n">time_zone_tm</span> <span class="k">AS</span> <span class="nb">TIME</span><span class="p">)</span> <span class="k">AS</span> <span class="n">time_zone_tm</span>
</code></pre></div></div> <p>Let’s some up with working case of selecting events from 9 to 20 o’clock with correction of timezone <code class="language-plaintext highlighter-rouge">time_zone_tm</code></p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- I'll write in where </span>
<span class="k">WHERE</span> <span class="n">TIMESTAMPDIFF</span><span class="p">(</span><span class="k">MINUTE</span><span class="p">)</span>
</code></pre></div></div> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- counts minutes from 0:00:00 to current time  </span>
<span class="n">TIMESTAMPDIFF</span><span class="p">(</span><span class="k">MINUTE</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="k">CURRENT_DATE</span> <span class="k">as</span> <span class="n">timestmap</span><span class="p">),</span> <span class="n">LocalTimestmap</span> <span class="p">)</span>
</code></pre></div></div> <p>EXTRACT(HOUR FROM time_zone_tm) * 60 + 7 * 60 + 30 EXTRACT(MINUTE FROM time_zone_tm) + 19 * 60 +15</p> <h2 id="escaping-fields">Escaping fields</h2> <p>FlinkSQL allows to escape field with backticks like that</p> <pre><code class="language-SQL">CREATE TABLE kafka_source {
    id STRING,
    -- event STRING, can throw a mistake :( 
    `event` STRING 
}
</code></pre> <p>It can be a leverage in situation with overloaded words like <code class="language-plaintext highlighter-rouge">group</code> or <code class="language-plaintext highlighter-rouge">event</code></p> <h2 id="json-unpacking">JSON unpacking</h2> <p>Sometimes data in json is provided in encrypted format.</p> <pre><code class="language-JSON">{
    "time_info": 170123456,
    "Data": "asesdasd"
}
</code></pre> <p>First of all you nee</p> <p>Just use</p> <p>JSON_VALUE</p> <p>Flink has documentation, yet it’s syntaxis can look unfamiliar. Actually it’s just a way to navigate through hierarchical structures.</p> <p>I’ll guide you through.</p> <ul> <li><code class="language-plaintext highlighter-rouge">$</code> - mean <code class="language-plaintext highlighter-rouge">self</code> in Python ot <code class="language-plaintext highlighter-rouge">this</code> in JavaScript sense. It</li> <li>[<code class="language-plaintext highlighter-rouge">a</code>] - helps to select field in map</li> <li>[0] - helps to select element in list. Recall that list is ordered structure.</li> </ul> <p>Unfortunatelly you can’t cast extracted field to your desire type inline like that</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>JSON_VALUE('DataJson')

</code></pre></div></div> <p>Sometimes</p> <p>Suppose our message has</p> <p>Yet a lot of</p> <h2 id="join-types">Join types</h2> <p>Joins can mess order of events!</p> <ul> <li> <p>regular join Can bring OOM errors</p> </li> <li> <p>interval join Flink automatically removes events</p> </li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT id

FROM source1 AS t1
JOIN source2 AS t2 ON
    s1.id = s2.id AND
    s1.ts BETWEEN t2.ts - INTERVAL '5' minute AND 
        t2.ts + INTERVAL '5' minute
</code></pre></div></div> <ul> <li>temporal joins Allows to work with time versioned</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT  
FROM events AS t1
LEFT JOIN temporal_table FOR SYSTEM_TIME AS OF t1.event_time AS t2 ON
    t1.id = t2.id
</code></pre></div></div> <p>That join automatically choses maximum time before event.</p> <ul> <li>temporal join</li> </ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Apache Flink is powerful streaming]]></summary></entry><entry><title type="html">Airflow automatization</title><link href="https://nmashalov.github.io/blog/2024/optimal_transport/" rel="alternate" type="text/html" title="Airflow automatization"/><published>2024-01-10T00:00:00+00:00</published><updated>2024-01-10T00:00:00+00:00</updated><id>https://nmashalov.github.io/blog/2024/optimal_transport</id><content type="html" xml:base="https://nmashalov.github.io/blog/2024/optimal_transport/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Optimal transport is useful beyond classical problems of logistic and resource management. That method is somehow universal. I describe from my personal experience in NLP.</p> <p>Optimal transport is useful tool for data scientist. I’ll bring case from my personal practice to prove.</p> <h2 id="bussiness-case-matching-scripts">Bussiness case. Matching scripts</h2> <p>Suppose we have call-center, where junior operators read scripts and more proficient colleagues speak freestyle. We want to match phrases from scripts to new original variations of freestylers.</p> <p>Modern neural nets models BERT provides us with convenient of vector representation of sentences.</p> <p>We actually have two distibutions of sentences. First is for scipt sentences, second for</p> <p>You can read more about embeddings <a href="https://www.turing.com/kb/guide-on-word-embeddings-in-nlp">here</a>.</p> <p>In normal practise we use cosine similarity</p> \[\text{similarity} = \cos(\text{emb}_1,\text{emb}_2)\] <p>All we need is to bring optimal connection.</p> <h2 id="about-optimality">About optimality</h2> <p>Optimality is actually one of the way of thinking and defining objects.</p> <p>What’s more importantly you can relax</p> <h2 id="entropy-regularized-optimal-transport">Entropy regularized optimal transport</h2> \[\int_{x \in \Pi(\mu,\nu)}\] <h2 id="resources">Resources</h2> <p>Computational Optimal Transport by Marco Cuturi https://arxiv.org/pdf/1803.00567.pdf</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Better organization PERT</title><link href="https://nmashalov.github.io/blog/2024/sheduling/" rel="alternate" type="text/html" title="Better organization PERT"/><published>2024-01-10T00:00:00+00:00</published><updated>2024-01-10T00:00:00+00:00</updated><id>https://nmashalov.github.io/blog/2024/sheduling</id><content type="html" xml:base="https://nmashalov.github.io/blog/2024/sheduling/"><![CDATA[<p>During my interview I was asked about . That was really complex task. I had intuition that it’s well known problem.</p> <h2 id="pert">PERT</h2> <p>https://en.wikipedia.org/wiki/Program_evaluation_and_review_technique</p>]]></content><author><name></name></author><summary type="html"><![CDATA[During my interview I was asked about . That was really complex task. I had intuition that it’s well known problem.]]></summary></entry><entry><title type="html">Streaming architecture</title><link href="https://nmashalov.github.io/blog/2024/streaming-architecture/" rel="alternate" type="text/html" title="Streaming architecture"/><published>2024-01-10T00:00:00+00:00</published><updated>2024-01-10T00:00:00+00:00</updated><id>https://nmashalov.github.io/blog/2024/streaming-architecture</id><content type="html" xml:base="https://nmashalov.github.io/blog/2024/streaming-architecture/"><![CDATA[<p>Streaming application also known as near real time (NRT) are . They are widely used in credit scoring, geoanalytics and mobile.</p> <p>Current popular solutions are</p> <p>In this article I share my heuristics for building streaming application. I’ll touch upon:</p> <ul> <li>ways to aggregate</li> </ul> <p>Assumptions:</p> <ul> <li>we are provided with enough of kafka</li> </ul> <p>Such assumptions helps us to:</p> <p>We get triggers of all cats</p> <h2 id="onion-architecture">Onion architecture</h2> <p>I’ll give a quick overview over architecture</p> <table> <thead> <tr> <th>Layer</th> <th>Credo</th> <th>Principles</th> <th>Tech realisation</th> </tr> </thead> <tbody> <tr> <td>Feature extraction layer</td> <td>Extract as much as possible</td> <td> </td> <td> </td> </tr> </tbody> </table> <p>Teach realisation:</p> <ul> <li>feature extraction <ul> <li>every side streaming source will have it own kafka topic</li> <li>that topic should be filter only by your domain</li> <li>yet we don’t enrich it yet with our domain info</li> </ul> </li> <li>feature level <ul> <li>we merge all semantics group in one</li> <li>model scheme should have one datamodel</li> </ul> </li> <li>enrichment layer <ul> <li>we enrich</li> </ul> </li> <li>strategy layer <ul> <li>only nessary info for side developer</li> <li>all strategies are merged to one output topic</li> </ul> </li> </ul> <h2 id="architecture-judgement">Architecture judgement</h2> <p>Arhitecture brings useful decomposition</p> <h2 id="feature-level">Feature level</h2> <p>On feature level we are interested on aggregating in planar format.</p> <p>Suppose we have nested structure</p> <h2 id="aggregation-level">Aggregation level</h2> <p>There are two ways to aggregate info with common schema or without. I’ll share pros and cons of both approach.</p> <p>Common schema is beneficial for side developer. As he can. Also common schema allows to use AVRO for effective.</p> <p>Yet standardization can bring serious obstacles:</p> <ul> <li>fields with common</li> </ul> <p>First</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Streaming application also known as near real time (NRT) are . They are widely used in credit scoring, geoanalytics and mobile.]]></summary></entry><entry><title type="html">Neural Painting</title><link href="https://nmashalov.github.io/blog/2024/neural_painting/" rel="alternate" type="text/html" title="Neural Painting"/><published>2024-01-09T00:00:00+00:00</published><updated>2024-01-09T00:00:00+00:00</updated><id>https://nmashalov.github.io/blog/2024/neural_painting</id><content type="html" xml:base="https://nmashalov.github.io/blog/2024/neural_painting/"><![CDATA[<p>Types:</p> <ul> <li>inpainting</li> <li>stroke-based</li> </ul> <h2 id="style2paints">Style2Paints</h2> <p>Popular tool for colorisation of line art https://lllyasviel.github.io/Style2PaintsResearch/</p> <p>Despite v4 version used classical methods, v5 now use stable diffusion for colorization.</p> <h2 id="tracking">Tracking</h2> <p>https://ttwong12.github.io/papers/toontrack/toontrack.html</p> <h2 id="sceletionization">Sceletionization</h2> <p>https://lllyasviel.github.io/DanbooRegion/paper/paper.pdf</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">tricks</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">skimage.morphology</span> <span class="kn">import</span> <span class="n">skeletonize</span><span class="p">,</span> <span class="n">dilation</span>

<span class="k">def</span> <span class="nf">get_skeleton</span><span class="p">(</span><span class="n">region_map</span><span class="p">):</span>
    <span class="n">Xp</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">pad</span><span class="p">(</span><span class="n">region_map</span><span class="p">,</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span> <span class="sh">'</span><span class="s">symmetric</span><span class="sh">'</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="n">Yp</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">pad</span><span class="p">(</span><span class="n">region_map</span><span class="p">,</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span> <span class="sh">'</span><span class="s">symmetric</span><span class="sh">'</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">((</span><span class="n">Xp</span><span class="p">[</span><span class="mi">1</span><span class="p">:,</span> <span class="p">:,</span> <span class="p">:]</span> <span class="o">-</span> <span class="n">Xp</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:,</span> <span class="p">:])</span> <span class="o">**</span> <span class="mf">2.0</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="o">**</span> <span class="mf">0.5</span>
    <span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">((</span><span class="n">Yp</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:,</span> <span class="p">:]</span> <span class="o">-</span> <span class="n">Yp</span><span class="p">[:,</span> <span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:])</span> <span class="o">**</span> <span class="mf">2.0</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="o">**</span> <span class="mf">0.5</span>
    <span class="n">edge</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">region_map</span><span class="p">)[:,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">]</span>
    <span class="n">edge</span><span class="p">[</span><span class="n">X</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
    <span class="n">edge</span><span class="p">[</span><span class="n">Y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
    <span class="n">edge</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="mi">255</span>
    <span class="n">edge</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span> <span class="o">=</span> <span class="mi">255</span>
    <span class="n">edge</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
    <span class="n">edge</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
    <span class="n">skeleton</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="nf">dilation</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">)</span>
    <span class="n">skeleton</span> <span class="o">=</span> <span class="nf">skeletonize</span><span class="p">(</span><span class="n">skeleton</span><span class="p">)</span>
    <span class="n">skeleton</span> <span class="o">=</span> <span class="p">(</span><span class="n">skeleton</span> <span class="o">*</span> <span class="mf">255.0</span><span class="p">).</span><span class="nf">clip</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>
    <span class="n">field</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="mf">255.0</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">shape</span><span class="p">).</span><span class="nf">clip</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>
    <span class="n">field</span><span class="p">[</span><span class="n">skeleton</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
    <span class="n">field</span><span class="p">[</span><span class="n">edge</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="nb">filter</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span>
        <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span>
        <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span> <span class="o">/</span> <span class="mf">5.0</span>
    <span class="n">height</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="mf">255.0</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">field</span><span class="p">.</span><span class="n">shape</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">512</span><span class="p">):</span>
        <span class="n">height</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">filter2D</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">CV_32F</span><span class="p">,</span> <span class="nb">filter</span><span class="p">)</span>
        <span class="n">height</span><span class="p">[</span><span class="n">skeleton</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">255.0</span>
        <span class="n">height</span><span class="p">[</span><span class="n">edge</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="k">return</span> <span class="n">height</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">sys</span>
    <span class="n">region_map</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">vis</span><span class="sh">'</span><span class="p">,</span> <span class="nf">get_skeleton</span><span class="p">(</span><span class="n">region_map</span><span class="p">))</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <h2 id="datasets">Datasets</h2> <p>Main source of dataset is Danbooru provided by <a href="https://gwern.net/">Gwern</a>.,</p> <p>Dataset preparation:</p> <p>https://github.com/lllyasviel/DanbooRegion/tree/master?tab=readme-ov-file</p> <p>https://gwern.net/doc/ai/anime/danbooru/2023-kim.pdf https://lllyasviel.github.io/SplitFilling/</p> <h2 id="edgar-simo-serra">Edgar Simo-Serra</h2> <p>Collections of work on morphological coloring of pictures. https://esslab.jp/</p> <p>Start from scetch infilling</p> <ul> <li>Scetch Simplification</li> <li>Mastering Sketching https://arxiv.org/pdf/1703.08966.pdf</li> </ul> <p>Dataset</p> <table> <thead> <tr> <th style="text-align: center"><img src="/assets/img/posts/drawing/Simo-Serra/drawing.png" alt="drawing.jpg"/></th> </tr> </thead> <tbody> <tr> <td style="text-align: center"><em>Sketch Simplification</em></td> </tr> </tbody> </table> <h2 id="notable-work">Notable work</h2> <p>https://github.com/moellenh/flatgan https://dl.acm.org/doi/10.1145/3581783.3613788</p> <p>https://github.com/houseofsecrets/SdPaint Skeletonize</p> <p>https://github.com/ermongroup/SDEdit</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Types: inpainting stroke-based]]></summary></entry><entry><title type="html">3dModels</title><link href="https://nmashalov.github.io/blog/2024/three_d_model/" rel="alternate" type="text/html" title="3dModels"/><published>2024-01-08T00:00:00+00:00</published><updated>2024-01-08T00:00:00+00:00</updated><id>https://nmashalov.github.io/blog/2024/three_d_model</id><content type="html" xml:base="https://nmashalov.github.io/blog/2024/three_d_model/"><![CDATA[<p>Here’s my overview of current achievements in 3D</p> <p>As pictures have several approaches like SVG and PNG 3d models also have different representation:</p> <ul> <li>mesh</li> <li>voxel (3d pixel)</li> <li>NERF</li> </ul> <p>Formats can be transformed</p> <p>Current</p> <h2 id="rendering">Rendering</h2> <p>https://pytorch3d.org/</p> <p>Most crucial equation comes. It’s defined through density estimation</p> <h2 id="nerf">NERF</h2> <p>Awesome overview of NERF are presented in <a href="https://theaisummer.com/nerf/">AI SUMMER</a></p> <table> <thead> <tr> <th style="text-align: center"><img src="/assets/img/posts/three_d_dmodels/neural_field.png" alt="NERF.jpg"/></th> </tr> </thead> <tbody> <tr> <td style="text-align: center"><em>NERF</em></td> </tr> </tbody> </table> <h2 id="techniques">Techniques</h2> <ul> <li>Point Cloud</li> <li>https://pals.ttic.edu/p/score-jacobian-chaining</li> </ul> <p>I list influential</p> <h2 id="influential-works">Influential works</h2> <p>OpenAI</p> <ul> <li>PointE https://arxiv.org/abs/2212.08751</li> <li>ShapE https://arxiv.org/abs/2305.02463</li> </ul> <p>Google Research</p> <ul> <li>DreamFusion https://dreamfusion3d.github.io/</li> </ul> <h2 id="latest-article">Latest article</h2> <p>As Advice using</p> <h2 id="resourses">Resourses</h2> <h2 id="references">References</h2> <p>[1] https://pals.ttic.edu/p/score-jacobian-chaining</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Here’s my overview of current achievements in 3D]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://nmashalov.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://nmashalov.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://nmashalov.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Generative Modeling by Estimating Gradients of the Data Distribution</title><link href="https://nmashalov.github.io/blog/2021/diffusion_nets/" rel="alternate" type="text/html" title="Generative Modeling by Estimating Gradients of the Data Distribution"/><published>2021-05-05T15:12:00+00:00</published><updated>2021-05-05T15:12:00+00:00</updated><id>https://nmashalov.github.io/blog/2021/diffusion_nets</id><content type="html" xml:base="https://nmashalov.github.io/blog/2021/diffusion_nets/"><![CDATA[<d-contents> <nav class="l-text figcaption"> <h3>Contents</h3> <div><a href="#introduction"> Introduction </a></div> <div><a href="#the-score-function-score-based-models-and-score-matching">The score function, score-based models, and score matching</a></div> <div><a href="#langevin-dynamics">Langevin dynamics</a></div> <div><a href="#naive-score-based-generative-modeling-and-its-pitfalls">Naive score-based generative modeling and its pitfalls</a></div> <div><a href="#score-based-generative-modeling-with-multiple-noise-perturbations">Score-based generative modeling with multiple noise perturbations</a></div> <div><a href="#score-based-generative-modeling-with-stochastic-differential-equations-sdes">Score-based generative modeling with stochastic differential equations (SDEs)</a> </div> <ul> <li><a href="#perturbing-data-with-an-sde">Perturbing data with an SDE</a></li> <li><a href="#reversing-the-sde-for-sample-generation">Reversing the SDE for sample generation</a></li> <li><a href="#estimating-the-reverse-sde-with-score-based-models-and-score-matching">Estimating the reverse SDE with score-based models and score matching</a></li> <li><a href="#how-to-solve-the-reverse-sde"> How to solve the reverse SDE </a></li> <li><a href="#probability-flow-ode">Probability flow ODE</a></li> <li><a href="#controllable-generation-for-inverse-problem-solving">Controllable generation for inverse problem solving</a></li> </ul> <div><a href="#connection-to-diffusion-models-and-others">Connection to diffusion models and others</a></div> <div><a href="#concluding-remarks">Concluding remarks</a></div> </nav> </d-contents> <p>Diffusion nets were great success with image generation. I’ll make an overview of connected methods.</p> <h2 id="normal-distribution-information-geometry-approach">Normal distribution. Information geometry approach</h2> <p>It can be shown that riemanian metric of gaussian distribution is equal to: \(g = \frac{1}{\sigma^2}(d\mu^2+2d\sigma^2)\)</p> <p>That speculations is very important due to fact it’s curvature defines hyperbolic space.</p> <p>Hyperbolic space is naturally hierarchical</p> <h2 id="energy-based-methods">Energy-based methods</h2> <h2 id="ar">Ar</h2> <h2 id="physics-way-of-thinking-of-langevin-dynamics">Physics way of thinking of Langevin dynamics</h2> <p>Recall, Langevin gradient descent is brought by</p> \[x_{t+1} = x_t + \eta\] <p>Diffusion process are stochastic in local, but not one global scale. You can rule diffusion by simple temperature difference.</p> <p>But why add noise?</p> <p>A smarter way for representation is to ask why exactly gaussian noise?</p> <h2 id="central-limit-theorem">Central limit theorem</h2> <p>It’s well known fact:</p> <p>But why really that happens behind fuss of formulas? What is actual speed of convergence? And what’s more important what is so special about normal distribution?</p> <p>I’ll provide you with intuition for answering this questions.</p> <h2 id="fokker-plank-equation">Fokker-Plank equation</h2> <p>https://en.wikipedia.org/wiki/Fokker%E2%80%93Planck_equation</p> \[\frac{\partial}{\partial t} p(x,t) = - \frac{\partial}{\partial x}[\mu(x,t)p(x,t)] + \partial{}{}\] <h2 id="diffusion-maps">Diffusion maps</h2> <p>Is approach for dimension reduction similar as PCA and t-SNE. You can read <a href="https://en.wikipedia.org/wiki/Diffusion_map">more</a></p> <h2 id="useful-resources">Useful resources</h2> <p>Blogs:</p> <ol> <li>Markov chains https://bjlkeng.io/posts/markov-chain-monte-carlo-mcmc-and-the-metropolis-hastings-algorithm/</li> </ol> <p>Videos:</p> <ol> <li>https://www.youtube.com/watch?v=hbIfrLefwzw</li> </ol>]]></content><author><name>Yang Song</name></author><summary type="html"><![CDATA[This blog post focuses on a promising new direction for generative modeling. We can learn score functions (gradients of log probability density functions) on a large number of noise-perturbed data distributions, then generate samples with Langevin-type sampling. The resulting generative models, often called score-based generative models, has several important advantages over existing model families: GAN-level sample quality without adversarial training, flexible model architectures, exact log-likelihood computation, and inverse problem solving without re-training models. In this blog post, we will show you in more detail the intuition, basic concepts, and potential applications of score-based generative models.]]></summary></entry></feed>